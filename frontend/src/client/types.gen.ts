// This file is auto-generated by @hey-api/openapi-ts

export type ArpTablePublic = {
    /**
     * 关联的 Switch id
     */
    swithch_id: string;
    /**
     * IP地址
     */
    ip?: string;
    /**
     * MAC地址
     */
    mac?: string;
    /**
     * 接口
     */
    interface?: string;
    /**
     * VLAN
     */
    vlan?: string;
    /**
     * 更新时间
     */
    updated?: string;
    id: string;
    switch: (SwitchLite | null);
};

export type ArpTablesPublic = {
    data: Array<ArpTablePublic>;
    count: number;
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_switches_import_switches = {
    file: (Blob | File);
};

export type BranchCreate = {
    /**
     * 分支名称
     */
    name: string;
};

export type BranchesPublic = {
    data: Array<BranchPublic>;
    count: number;
};

export type BranchPublic = {
    /**
     * 分支名称
     */
    name: string;
    id: string;
};

export type BranchUpdate = {
    name?: (string | null);
};

export type Dashboard = {
    switch_backup_count: number;
    vrf_count: number;
    vrf_diff_count: number;
    iptable_count: number;
    iptable_diff_count: number;
    config_diff_count: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InspectorCreate = {
    /**
     * 巡检账号名
     */
    name: string;
    /**
     * 巡检密码
     */
    password: string;
    /**
     * 账号描述
     */
    description?: string;
};

export type InspectorPublic = {
    /**
     * 巡检账号名
     */
    name: string;
    /**
     * 巡检密码
     */
    password: string;
    /**
     * 账号描述
     */
    description?: string;
    id: string;
};

export type InspectorsPublic = {
    data: Array<InspectorPublic>;
    count: number;
};

export type InspectorUpdate = {
    name?: (string | null);
    password?: (string | null);
    description?: (string | null);
};

export type IPtablePublic = {
    /**
     * 关联的 Switch id
     */
    switch_id: string;
    /**
     * 接口
     */
    interface?: string;
    /**
     * 管理IP
     */
    ip?: string;
    /**
     * 掩码
     */
    mask?: number;
    /**
     * VRF
     */
    vrf?: string;
    /**
     * ACL
     */
    acl?: string;
    /**
     * 状态
     */
    status?: string;
    /**
     * 创建日期（仅日期）
     */
    created?: string;
    /**
     * 更新时间
     */
    updated?: string;
    id: string;
    switch: (SwitchLite | null);
};

export type IPtablesPublic = {
    data: Array<IPtablePublic>;
    count: number;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type SwitchConfigBase = {
    /**
     * 关联的 Switch id
     */
    switch_id: string;
    /**
     * 当天备份状态
     */
    status?: string;
    /**
     * 配置文件路径
     */
    config_path?: string;
    /**
     * 备份日期（仅日期）
     */
    created?: string;
    /**
     * 更新时间
     */
    updated?: string;
};

export type SwitchConfigShow = {
    content: (string | null);
    switch: (SwitchLite | null);
    created: (string | null);
    updated: (string | null);
    start_date: (string | null);
};

export type SwitchCreate = {
    /**
     * 设备名
     */
    name: string;
    /**
     * 管理IP
     */
    ip: string;
    /**
     * 状态
     */
    status?: boolean;
    /**
     * 堆叠数量
     */
    stack_num?: number;
    /**
     * 操作系统型号
     */
    stype?: (string | null);
    /**
     * 软件版本
     */
    software_version?: string;
    /**
     * 硬件型号
     */
    hardware_type?: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * 序列号
     */
    sn?: string;
    /**
     * 添加日期
     */
    add_date?: string;
    /**
     * 修改日期
     */
    mod_date?: string;
    /**
     * 分支ID
     */
    branch_id?: (string | null);
    /**
     * 登录方式ID
     */
    login_type_id?: (string | null);
    /**
     * 巡检账号ID
     */
    inspector_id?: (string | null);
};

export type SwitchesPublic = {
    data: Array<SwitchPublic>;
    count: number;
};

export type SwitchLite = {
    name: string;
    ip: string;
    stack_num: number;
    branch: (BranchPublic | null);
};

export type SwitchLoginTypePublic = {
    /**
     * 登录方式
     */
    name?: string;
    id: string;
};

export type SwitchLoginTypesPublic = {
    data: Array<SwitchLoginTypePublic>;
    count: number;
};

export type SwitchPublic = {
    /**
     * 设备名
     */
    name: string;
    /**
     * 管理IP
     */
    ip: string;
    /**
     * 状态
     */
    status?: boolean;
    /**
     * 堆叠数量
     */
    stack_num?: number;
    /**
     * 操作系统型号
     */
    stype?: (string | null);
    /**
     * 软件版本
     */
    software_version?: string;
    /**
     * 硬件型号
     */
    hardware_type?: string;
    /**
     * 描述
     */
    description?: string;
    /**
     * 序列号
     */
    sn?: string;
    /**
     * 添加日期
     */
    add_date?: string;
    /**
     * 修改日期
     */
    mod_date?: string;
    /**
     * 分支ID
     */
    branch_id?: (string | null);
    /**
     * 登录方式ID
     */
    login_type_id?: (string | null);
    /**
     * 巡检账号ID
     */
    inspector_id?: (string | null);
    branch: (BranchPublic | null);
    login_type: (SwitchLoginTypePublic | null);
    inspector: (InspectorPublic | null);
    latest_config: (SwitchConfigBase | null);
    id: string;
};

export type SwitchUpdate = {
    name?: (string | null);
    ip?: (string | null);
    status?: (boolean | null);
    stack?: (number | null);
    stype?: (string | null);
    software_version?: (string | null);
    hardware_type?: (string | null);
    description?: (string | null);
    sn?: (string | null);
    branch_id?: (string | null);
    login_type_id?: (string | null);
    inspector_id?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type VrfPublic = {
    /**
     * VRF名称
     */
    name?: string;
    rd: string;
    /**
     * 路由 target
     */
    rt?: string;
    /**
     * 描述
     */
    description?: string;
};

export type VrfsPublic = {
    data: Array<VrfPublic>;
    count: number;
};

export type ArptablesReadArptablesData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type ArptablesReadArptablesResponse = (ArpTablesPublic);

export type BranchesReadBranchesData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type BranchesReadBranchesResponse = (BranchesPublic);

export type BranchesCreateBranchData = {
    requestBody: BranchCreate;
};

export type BranchesCreateBranchResponse = (BranchPublic);

export type BranchesReadBranchData = {
    id: string;
};

export type BranchesReadBranchResponse = (BranchPublic);

export type BranchesUpdateBranchData = {
    id: string;
    requestBody: BranchUpdate;
};

export type BranchesUpdateBranchResponse = (BranchPublic);

export type BranchesDeleteBranchData = {
    id: string;
};

export type BranchesDeleteBranchResponse = (Message);

export type DashboardGetDashboardResponse = (Dashboard);

export type InspectorsReadInspectorsData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type InspectorsReadInspectorsResponse = (InspectorsPublic);

export type InspectorsCreateInspectorData = {
    requestBody: InspectorCreate;
};

export type InspectorsCreateInspectorResponse = (InspectorPublic);

export type InspectorsReadInspectorData = {
    id: string;
};

export type InspectorsReadInspectorResponse = (InspectorPublic);

export type InspectorsUpdateInspectorData = {
    id: string;
    requestBody: InspectorUpdate;
};

export type InspectorsUpdateInspectorResponse = (InspectorPublic);

export type InspectorsDeleteInspectorData = {
    id: string;
};

export type InspectorsDeleteInspectorResponse = (Message);

export type IptablesReadIptablesData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type IptablesReadIptablesResponse = (IPtablesPublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type SwitchesReadSwitchesData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type SwitchesReadSwitchesResponse = (SwitchesPublic);

export type SwitchesCreateSwitchData = {
    requestBody: SwitchCreate;
};

export type SwitchesCreateSwitchResponse = (SwitchPublic);

export type SwitchesReadSwitchData = {
    id: string;
};

export type SwitchesReadSwitchResponse = (SwitchPublic);

export type SwitchesUpdateSwitchData = {
    id: string;
    requestBody: SwitchUpdate;
};

export type SwitchesUpdateSwitchResponse = (SwitchPublic);

export type SwitchesDeleteSwitchData = {
    id: string;
};

export type SwitchesDeleteSwitchResponse = (Message);

export type SwitchesDeleteMultipleSwitchesData = {
    requestBody: Array<(string)>;
};

export type SwitchesDeleteMultipleSwitchesResponse = (Message);

export type SwitchesBackupSwitchData = {
    id: string;
};

export type SwitchesBackupSwitchResponse = (unknown);

export type SwitchesBackupMultipleSwitchesData = {
    requestBody: Array<(string)>;
};

export type SwitchesBackupMultipleSwitchesResponse = (unknown);

export type SwitchesImportSwitchesData = {
    formData: Body_switches_import_switches;
};

export type SwitchesImportSwitchesResponse = (unknown);

export type SwitchesGetSwitchConfigData = {
    configDate: string;
    id: string;
};

export type SwitchesGetSwitchConfigResponse = (SwitchConfigShow);

export type SwitchLoginTypeReadSwitchLoginTypesResponse = (SwitchLoginTypesPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type VrfsReadVrfsData = {
    limit?: number;
    searchText?: string;
    skip?: number;
};

export type VrfsReadVrfsResponse = (VrfsPublic);