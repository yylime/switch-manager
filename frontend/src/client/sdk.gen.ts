// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ArptablesReadArptablesData, ArptablesReadArptablesResponse, BranchesReadBranchesData, BranchesReadBranchesResponse, BranchesCreateBranchData, BranchesCreateBranchResponse, BranchesReadBranchData, BranchesReadBranchResponse, BranchesUpdateBranchData, BranchesUpdateBranchResponse, BranchesDeleteBranchData, BranchesDeleteBranchResponse, DashboardGetDashboardResponse, InspectorsReadInspectorsData, InspectorsReadInspectorsResponse, InspectorsCreateInspectorData, InspectorsCreateInspectorResponse, InspectorsReadInspectorData, InspectorsReadInspectorResponse, InspectorsUpdateInspectorData, InspectorsUpdateInspectorResponse, InspectorsDeleteInspectorData, InspectorsDeleteInspectorResponse, IptablesReadIptablesData, IptablesReadIptablesResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, SwitchesReadSwitchesData, SwitchesReadSwitchesResponse, SwitchesCreateSwitchData, SwitchesCreateSwitchResponse, SwitchesReadSwitchData, SwitchesReadSwitchResponse, SwitchesUpdateSwitchData, SwitchesUpdateSwitchResponse, SwitchesDeleteSwitchData, SwitchesDeleteSwitchResponse, SwitchesDeleteMultipleSwitchesData, SwitchesDeleteMultipleSwitchesResponse, SwitchesBackupSwitchData, SwitchesBackupSwitchResponse, SwitchesBackupMultipleSwitchesData, SwitchesBackupMultipleSwitchesResponse, SwitchesImportSwitchesData, SwitchesImportSwitchesResponse, SwitchesGetSwitchConfigData, SwitchesGetSwitchConfigResponse, SwitchLoginTypeReadSwitchLoginTypesResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, VrfsReadVrfsData, VrfsReadVrfsResponse } from './types.gen';

export class ArptablesService {
    /**
     * Read Arptables
     * Retrieve iptables.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns ArpTablesPublic Successful Response
     * @throws ApiError
     */
    public static readArptables(data: ArptablesReadArptablesData = {}): CancelablePromise<ArptablesReadArptablesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/arptables/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BranchesService {
    /**
     * Read Branches
     * Retrieve branches.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns BranchesPublic Successful Response
     * @throws ApiError
     */
    public static readBranches(data: BranchesReadBranchesData = {}): CancelablePromise<BranchesReadBranchesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/branches/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Branch
     * Create new branch.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BranchPublic Successful Response
     * @throws ApiError
     */
    public static createBranch(data: BranchesCreateBranchData): CancelablePromise<BranchesCreateBranchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/branches/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Branch
     * Get branch by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns BranchPublic Successful Response
     * @throws ApiError
     */
    public static readBranch(data: BranchesReadBranchData): CancelablePromise<BranchesReadBranchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/branches/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Branch
     * Update a branch.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns BranchPublic Successful Response
     * @throws ApiError
     */
    public static updateBranch(data: BranchesUpdateBranchData): CancelablePromise<BranchesUpdateBranchResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/branches/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Branch
     * Delete a branch.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteBranch(data: BranchesDeleteBranchData): CancelablePromise<BranchesDeleteBranchResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/branches/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DashboardService {
    /**
     * Get Dashboard
     * Retrieve dashboard.
     * @returns Dashboard Successful Response
     * @throws ApiError
     */
    public static getDashboard(): CancelablePromise<DashboardGetDashboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard/'
        });
    }
    
}

export class InspectorsService {
    /**
     * Read Inspectors
     * Retrieve inspectors.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns InspectorsPublic Successful Response
     * @throws ApiError
     */
    public static readInspectors(data: InspectorsReadInspectorsData = {}): CancelablePromise<InspectorsReadInspectorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/inspectors/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Inspector
     * Create new inspector.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns InspectorPublic Successful Response
     * @throws ApiError
     */
    public static createInspector(data: InspectorsCreateInspectorData): CancelablePromise<InspectorsCreateInspectorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/inspectors/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Inspector
     * Get inspector by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns InspectorPublic Successful Response
     * @throws ApiError
     */
    public static readInspector(data: InspectorsReadInspectorData): CancelablePromise<InspectorsReadInspectorResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/inspectors/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Inspector
     * Update an inspector.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns InspectorPublic Successful Response
     * @throws ApiError
     */
    public static updateInspector(data: InspectorsUpdateInspectorData): CancelablePromise<InspectorsUpdateInspectorResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/inspectors/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Inspector
     * Delete an inspector.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteInspector(data: InspectorsDeleteInspectorData): CancelablePromise<InspectorsDeleteInspectorResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/inspectors/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class IptablesService {
    /**
     * Read Iptables
     * Retrieve iptables.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns IPtablesPublic Successful Response
     * @throws ApiError
     */
    public static readIptables(data: IptablesReadIptablesData = {}): CancelablePromise<IptablesReadIptablesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/iptables/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SwitchesService {
    /**
     * Read Switches
     * Retrieve switches with latest config.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns SwitchesPublic Successful Response
     * @throws ApiError
     */
    public static readSwitches(data: SwitchesReadSwitchesData = {}): CancelablePromise<SwitchesReadSwitchesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/switches/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Switch
     * Create new switch.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SwitchPublic Successful Response
     * @throws ApiError
     */
    public static createSwitch(data: SwitchesCreateSwitchData): CancelablePromise<SwitchesCreateSwitchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/switches/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Switch
     * Get switch by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns SwitchPublic Successful Response
     * @throws ApiError
     */
    public static readSwitch(data: SwitchesReadSwitchData): CancelablePromise<SwitchesReadSwitchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/switches/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Switch
     * Update a switch.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns SwitchPublic Successful Response
     * @throws ApiError
     */
    public static updateSwitch(data: SwitchesUpdateSwitchData): CancelablePromise<SwitchesUpdateSwitchResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/switches/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Switch
     * Delete a switch.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteSwitch(data: SwitchesDeleteSwitchData): CancelablePromise<SwitchesDeleteSwitchResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/switches/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Multiple Switches
     * Delete multiple switches.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteMultipleSwitches(data: SwitchesDeleteMultipleSwitchesData): CancelablePromise<SwitchesDeleteMultipleSwitchesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/switches/delete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Backup Switch
     * Backup a switch.
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static backupSwitch(data: SwitchesBackupSwitchData): CancelablePromise<SwitchesBackupSwitchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/switches/backup/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Backup Multiple Switches
     * Backup multiple switches.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static backupMultipleSwitches(data: SwitchesBackupMultipleSwitchesData): CancelablePromise<SwitchesBackupMultipleSwitchesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/switches/backup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Import Switches
     * Import switches from a CSV file.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static importSwitches(data: SwitchesImportSwitchesData): CancelablePromise<SwitchesImportSwitchesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/switches/import',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Switch Config
     * Get a switch's configuration.
     * @param data The data for the request.
     * @param data.id
     * @param data.configDate
     * @returns SwitchConfigShow Successful Response
     * @throws ApiError
     */
    public static getSwitchConfig(data: SwitchesGetSwitchConfigData): CancelablePromise<SwitchesGetSwitchConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/switches/config',
            query: {
                id: data.id,
                config_date: data.configDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SwitchLoginTypeService {
    /**
     * Read Switch Login Types
     * Retrieve switch_login_type.
     * @returns SwitchLoginTypesPublic Successful Response
     * @throws ApiError
     */
    public static readSwitchLoginTypes(): CancelablePromise<SwitchLoginTypeReadSwitchLoginTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/switch_login_type/'
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}

export class VrfsService {
    /**
     * Read Vrfs
     * Retrieve iptables.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.searchText
     * @returns VrfsPublic Successful Response
     * @throws ApiError
     */
    public static readVrfs(data: VrfsReadVrfsData = {}): CancelablePromise<VrfsReadVrfsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/vrfs/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search_text: data.searchText
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}